name: RSV&Backup&Restore

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: 'Select the environment'
        required: true
        default: 'Dev'
        type: choice
        options:
          - Prod
          - Dev
      Operation:
        description: 'Select the operation'
        required: true
        default: 'backup'
        type: choice
        options:
          - backup
          - restore

jobs:
  run-powershell-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0

      - name: Checkout script repository
        uses: actions/checkout@v2
        with:
          repository: vivekcorp/scriptcall
          ref: main
          token: ${{ secrets.MY_GITHUB_PAT }}
          path: scriptcall

      - name: Install Az PowerShell Module
        run: |
          pwsh -Command 'Install-Module -Name Az -Force -AllowClobber -Scope CurrentUser'
          pwsh -Command 'Import-Module Az'

      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.PROD_ARM_CLIENT_ID }}","tenantId":"${{ secrets.PROD_ARM_TENANT_ID }}","clientSecret":"${{ secrets.PROD_ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.PROD_ARM_SUBSCRIPTION_ID }}"}'

      - name: Print Environment Variables
        run: printenv

      - name: Debug - Check Files and Folders
        run: |
          echo "Listing all files in workspace..."
          ls -R $GITHUB_WORKSPACE

      - name: Debug - List Important Directories
        run: |
          echo "Checking GoldenImage folder..."
          ls -al $GITHUB_WORKSPACE/GoldenImage || echo "GoldenImage folder not found!"
          echo "Checking Script folder..."
          ls -al $GITHUB_WORKSPACE/scriptcall/Testing/script || echo "Script folder not found!"

      - name: Debug - Print Full Path to Script
        run: |
          echo "Full path to the script:"
          echo "${GITHUB_WORKSPACE}/scriptcall/Testing/script/backup.ps1"
          echo "${GITHUB_WORKSPACE}/scriptcall/Testing/script/restore.ps1"
      
      - name: Set execute permission for scripts
        run: |
          chmod +x "${GITHUB_WORKSPACE}/scriptcall/Testing/script/backup.ps1"
          chmod +x "${GITHUB_WORKSPACE}/scriptcall/Testing/script/restore.ps1"

      - name: Run PowerShell Script
        run: |
          $Environment = "${{ github.event.inputs.Environment }}"
          $Operation = "${{ github.event.inputs.Operation }}"
          $ParameterPath = "${{ github.workspace }}/GoldenImage/${Environment}_Parameterfile.json"
          
          if ($Operation -eq "backup") {
              $ScriptPath = "${{ github.workspace }}/scriptcall/Testing/script/backup.ps1"
          } elseif ($Operation -eq "restore") {
              $ScriptPath = "${{ github.workspace }}/scriptcall/Testing/script/restore.ps1"
          }

          Write-Host "Script Path: $ScriptPath"
          Write-Host "Parameter Path: $ParameterPath"
          if (Test-Path -Path $ScriptPath) {
              Write-Host "Script file exists."
          } else {
              Write-Host "The script file $ScriptPath does not exist."
              exit 1
          }
          if (Test-Path -Path $ParameterPath) {
              Write-Host "Parameter file exists."
          } else {
              Write-Host "The parameter file $ParameterPath does not exist."
              exit 1
          }

          Write-Host "Connecting to Azure..."
          pwsh -Command "Connect-AzAccount -ServicePrincipal -TenantId '${{ secrets.PROD_ARM_TENANT_ID }}' -Credential (New-Object -TypeName 'System.Management.Automation.PSCredential' -ArgumentList '${{ secrets.PROD_ARM_CLIENT_ID }}', (ConvertTo-SecureString '${{ secrets.PROD_ARM_CLIENT_SECRET }}' -AsPlainText -Force))"
          
          if ($?) {
              Write-Host "Azure login successful."
          } else {
              Write-Host "Azure login failed."
              exit 1
          }

          pwsh -File "$ScriptPath" -ParameterPath "$ParameterPath"
        shell: pwsh

      - name: View keystore.cache contents
        run: |
          if [ -f "/home/runner/.Azure/keystore.cache" ]; then
              cat /home/runner/.Azure/keystore.cache
          else
              echo "keystore.cache file not found."
          fi
        shell: bash

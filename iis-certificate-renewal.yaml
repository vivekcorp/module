name: iis-certificate

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: 'Select the environment'
        required: true
        default: 'Prod'
        type: choice
        options:
          - Prod
          - Dev

jobs:
  install-iis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0

      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.PROD_ARM_CLIENT_ID }}","tenantId":"${{ secrets.PROD_ARM_TENANT_ID }}","clientSecret":"${{ secrets.PROD_ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.PROD_ARM_SUBSCRIPTION_ID }}"}'

      - name: Read JSON Parameters
        id: read-json
        run: |
          jsonContent=$(cat "${GITHUB_WORKSPACE}/GoldenImage/${{ github.event.inputs.Environment }}_Parameterfile.json")
          echo "RESOURCE_GROUP_NAME=$(echo $jsonContent | jq -r .ResourceGroupName)" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=$(echo $jsonContent | jq -r .KeyVaultName)" >> $GITHUB_ENV
          echo "KEY_VAULT_SECRET_NAME=$(echo $jsonContent | jq -r .KeyVaultSecretName)" >> $GITHUB_ENV
          echo "CERTIFICATE_PATH=$(echo $jsonContent | jq -r .CertificatePath)" >> $GITHUB_ENV
          echo "EXCLUDE_VMS=$(echo $jsonContent | jq -r .excludeVMs | jq -c .)" >> $GITHUB_ENV
      - name: Fetch Certificate Password from Key Vault
        id: fetch-secret
        run: |
          secret=$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name $KEY_VAULT_SECRET_NAME --query value -o tsv)
          echo "::add-mask::$secret"
          echo "CERTIFICATE_PASSWORD=$secret" >> $GITHUB_ENV
      - name: List VMs in Resource Group and Set VM_NAMES
        id: list-vms
        run: |
          vms=$(az vm list --resource-group $RESOURCE_GROUP_NAME --query "[].name" -o tsv)
          include_vms=()
          for vm in $vms; do
            if [[ ! " ${EXCLUDE_VMS[*]} " =~ " ${vm} " ]]; then
              include_vms+=($vm)
            fi
          done
          echo "VM_NAMES=$(IFS=,; echo "${include_vms[*]}")" >> $GITHUB_ENV
      - name: Trigger PowerShell Script on each VM
        env:
          CERTIFICATE_PASSWORD: ${{ env.CERTIFICATE_PASSWORD }}
        run: |
          IFS=, read -r -a vm_array <<< "$VM_NAMES"
          for vm in "${vm_array[@]}"; do
            az vm run-command invoke --command-id RunPowerShellScript --name $vm --resource-group $RESOURCE_GROUP_NAME --scripts "C:\\Cognos\\ssl.ps1 -certPassword '${{ env.CERTIFICATE_PASSWORD }}'"
          done

name: Restore-by-zone

on:
  workflow_dispatch:
    inputs:
      source_rg:
        description: 'Select Source Resource Group (Where VM Exists)'
        required: true
        default: 'transparent-infra'
        type: choice
        options:
          - 'transparent-infra'
          - 'transpro-vm_group'
      destination_rg:
        description: 'Select Destination Resource Group (Where Snapshots Are Stored)'
        required: true
        default: 'transinfrabkp'
        type: choice
        options:
          - 'transinfrabkp'
          
permissions:
  id-token: write
  contents: read

jobs:
  restore:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Resource Group Names
        run: |
          SRC_RG="${{ github.event.inputs.source_rg }}"
          DST_RG="${{ github.event.inputs.destination_rg }}"
          echo "Source RG: $SRC_RG"
          echo "Destination RG: $DST_RG"
          echo "SRC_RG=$SRC_RG" >> $GITHUB_ENV
          echo "DST_RG=$DST_RG" >> $GITHUB_ENV
          
      - name: Get Sorted Snapshots in Destination RG
        run: |
          az snapshot list -g $DST_RG --query "[?tags.vm_name != null] | sort_by(@, &tags.creationDate || @.timeCreated) | reverse(@)" -o json > all_snapshots.json
          cat all_snapshots.json
          
      - name: Filter Latest Snapshots Only
        run: |
          jq -c 'group_by(.tags.vm_name) | map(max_by(.timeCreated))' all_snapshots.json > latest_snapshots.json
          cat latest_snapshots.json
      - name: Restore Snapshots and Attach to VMs
        run: |
          latest_snapshots=$(cat latest_snapshots.json | jq -c '.[]')
          for snapshot in $latest_snapshots; do
            snapshot_name=$(echo $snapshot | jq -r '.name')
            snapshot_id=$(echo $snapshot | jq -r '.id')
            vm_name=$(echo $snapshot | jq -r '.tags.vm_name')
            echo "Restoring Snapshot: $snapshot_name for VM: $vm_name"
            region=$(az vm show -g $SRC_RG -n "$vm_name" --query "location" -o tsv)
            echo "VM Region: $region"
            zone=$(az vm show -g $SRC_RG -n "$vm_name" --query "zones[0]" -o tsv)
            disk_name="${vm_name}-disk-$(date +%Y%m%d%H%M%S)"
            if [ -z "$zone" ]; then
              echo "No availability zone for VM $vm_name. Creating disk without zone."
              disk_creation_output=$(az disk create \
                --name "$disk_name" \
                --resource-group "$SRC_RG" \
                --source "$snapshot_id" \
                --sku Premium_LRS \
                --location "$region" \
                --query "id" -o tsv)
            else
              echo "Availability zone for VM $vm_name is $zone. Creating disk with zone."
              disk_creation_output=$(az disk create \
                --name "$disk_name" \
                --resource-group "$SRC_RG" \
                --source "$snapshot_id" \
                --sku Premium_LRS \
                --location "$region" \
                --zone "$zone" \
                --query "id" -o tsv)
            fi
            echo "Disk creation output: $disk_creation_output"
            disk_id="$disk_creation_output"
            if [ -z "$disk_id" ]; then
              echo "Failed to create disk from snapshot $snapshot_name."
              continue
            fi
            echo "Disk $disk_name created successfully with ID: $disk_id"
            echo "Snapshot used for disk creation: $snapshot_name"
            az disk show --name "$disk_name" --resource-group "$SRC_RG" || { echo "Disk $disk_name not found. Skipping attachment."; continue; }
            vm_status=$(az vm show -g $SRC_RG -n "$vm_name" --query "powerState" -o tsv)
            if [ "$vm_status" != "VM running" ]; then
              echo "Starting VM $vm_name..."
              az vm start -g $SRC_RG -n "$vm_name"
            fi
            lun=$(az snapshot show --name "$snapshot_name" -g $DST_RG --query "tags.lun" -o tsv)
            echo "LUN extracted from snapshot tags: $lun"
            # Check if existing disk at LUN exists before attaching
            existing_disk=$(az vm show --resource-group $SRC_RG --name $vm_name --query "storageProfile.dataDisks" -o json | jq -r ".[] | select(.lun==$lun) | .name")
            if [ -n "$existing_disk" ]; then
              echo "Detaching existing disk $existing_disk from VM $vm_name at LUN $lun"
              az vm disk detach \
                --resource-group $SRC_RG \
                --vm-name $vm_name \
                --name $existing_disk
              echo "Existing disk $existing_disk detached successfully."
            fi
            echo "Attaching disk $disk_name to VM $vm_name at LUN $lun"
            az vm disk attach \
              --resource-group $SRC_RG \
              --vm-name "$vm_name" \
              --name "$disk_name" \
              --lun "$lun"
            echo "Disk $disk_name attached to VM $vm_name successfully."
          done
          
      - name: Clean Up
        run: rm latest_snapshots.json

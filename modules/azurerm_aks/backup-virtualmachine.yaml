name: Backup-disk-final-vm

on:
  workflow_dispatch:
    inputs:
      source_rg:
        description: 'Select Source Resource Group (Where VM Exists)'
        required: true
        default: 'transparent-infra'
        type: choice
        options:
          - 'transparent-infra'
      destination_rg:
        description: 'Select Destination Resource Group (Where Snapshots Will Be Stored)'
        required: true
        default: 'transinfrabkp'
        type: choice
        options:
          - 'transinfrabkp'

permissions:
  id-token: write
  contents: read

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Resource Group Names
        run: |
          SRC_RG="${{ github.event.inputs.source_rg }}"
          DST_RG="${{ github.event.inputs.destination_rg }}"
          echo "Source RG: $SRC_RG"
          echo "Destination RG: $DST_RG"
          echo "SRC_RG=$SRC_RG" >> $GITHUB_ENV
          echo "DST_RG=$DST_RG" >> $GITHUB_ENV

      - name: Get List of VMs
        run: |
          az vm list -g $SRC_RG --query "[].{name:name, id:id}" -o tsv > vm_list.txt
          cat vm_list.txt

      - name: Backup VMs and Create Snapshots
        run: |
          while IFS=$'\t' read -r vm_name vm_id; do
            echo "Processing VM: $vm_name"
            
            # Retrieve VM availability zone
            zone=$(az vm show -g $SRC_RG -n "$vm_name" --query "zones" -o tsv)
            if [ -z "$zone" ]; then
              zone="none"
            fi
            
            # Get data disks
            disks=$(az vm show -g $SRC_RG -n "$vm_name" --query "storageProfile.dataDisks[]" -o json)
            if [ "$disks" == "[]" ]; then
              echo "No data disks found for $vm_name"
              continue
            fi
            
            # Backup data disks
            echo "$disks" | jq -c '.[]' | while read -r disk; do
              disk_id=$(echo "$disk" | jq -r '.managedDisk.id')
              lun=$(echo "$disk" | jq -r '.lun')
              disk_name=$(basename "$disk_id")
              snapshot_name="${vm_name}-snapshot-$(date +%Y%m%d%H%M%S)"
              
              echo "Creating snapshot: $snapshot_name for disk: $disk_name (LUN: $lun) in Zone: $zone"
              snapshot_result=$(az snapshot create \
                --name "$snapshot_name" \
                --resource-group "$DST_RG" \
                --source "$disk_id" \
                --sku Premium_LRS \
                --tags "vm_name=$vm_name" "lun=$lun" "source_rg=$SRC_RG" "availability_zone=$zone" \
                --query "id" -o tsv)
              
              if [ -z "$snapshot_result" ]; then
                echo "Failed to create snapshot for $disk_name."
                continue
              fi
              echo "Snapshot $snapshot_name created successfully with ID: $snapshot_result"
            done
          done < vm_list.txt
